{% liquid
  assign desk_banner = section.settings.desk_banner
  assign mob_banner = section.settings.mob_banner
  assign current_variant = product.selected_or_first_available_variant
  assign featured_image = current_variant.featured_image | default: product.featured_image 
  assign stamp = section.settings.stamp
  assign stamp_url = section.settings.stamp_url
  assign quant = section.settings.quantity
  assign stock = section.settings.stock
  assign pre_order = section.settings.pre_order
%}

<div id="product" class="mb-10 mx-5 dm:max-w-screen-dm dm:mx-auto dm:px-10 ds:mx-9 dl:px-0">

  {% if product.metafields.banner.images != blank %}    
  <div class="mb-6">
    <picture>
      {% for elem in product.metafields.banner.images.value %}
        {% if forloop.index == 1 %}
            <source media="(min-width: 568px)" srcset="{{ elem | image_url }}">
        {% else %}
            <img class="rounded-cl w-full h-full" src="{{ elem | image_url }}" alt="{{ elem.alt | escape }}" title="{{ elem.alt | escape }}" loading="lazy">
        {% endif %}
      {% endfor %}
    </picture>
  </div>
  {% elsif mob_banner != blank and desk_banner != blank %}
  <div class="mb-6">
    <picture>
      <source media="(min-width: 568px)" srcset="{{ desk_banner | image_url }}">
      <img class="rounded-cl w-full h-full" src="{{ mob_banner | image_url }}" alt="{{ mob_banner | escape }}" title="{{ mob_banner.alt | escape }}" loading="lazy">
    </picture>
  </div>
  {% endif %}
  
  <div class="flex flex-col gap-6 ds:flex-row ds:gap-8">
    <div class="ds:sticky ds:top-44 ds:h-max ds:pr-3 ds:w-1/2">

      <div class="swiper swiper1 bg-white shadow-sp rounded-cl w-full mb-6">
        <div class="swiper-wrapper items-center">

          {% for image in product.images %}
            <picture class="swiper-slide swiper-lazy">
                <source media="(min-width: 1024px)" srcset="{{ image | image_url: width: 550 }}">
                <source media="(min-width: 768px)" srcset="{{ image | image_url: width: 990 }}">
                <source media="(min-width: 480px)" srcset="{{ image | image_url: width: 730 }}">
                <img class="w-full max-h-[500px] tl:max-h-[700px] ds:max-h-[600px]" src="{{ image | image_url: width: 440 }}" alt="{{ image.alt | escape  }}" title="{{ product.alt | escape }}" id="ProductPhotoImg">
            </picture>
          {% endfor %}    

        </div>
        <div class="swiper-pagination swiper-pagination-bullets swiper-pagination-horizontal">
          {% for image in product.images %}
            <span class="swiper-pagination-bullet"></span>
          {% endfor %}
        </div>              
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
      </div>

      <div class="swiper swiper2 h-24">
        <div class="swiper-wrapper">
        {% for image in product.images %}
          <div class="swiper-slide flex items-center bg-white rounded-cl" >
            <img class="shadow-sp rounded-cl object-cover mx-auto h-24" src="{{ image | image_url: height: 100 }}" title="{{ product.title | escape }}" alt="{{ image.alt | escape }}">
          </div>
        {% endfor %}
        </div>
      </div>
    </div>

    <div class="bg-white shadow-sp rounded-cl p-4 ds:p-6 ds:w-1/2">
      <div class="flex justify-between items-center mb-1 ds:mb-6">
        <h1 class="font-extrabold text-3xl text-text ds:text-title">{{ product.title }}</h1>
        
        {% if stamp != blank %}
          <a href="{{ stamp_url }}" title="{{ stamp_url.title }}"><img src="{{ stamp | image_url: width: 80 }}" class="w-20" alt="{{ Stamp.alt }}"></a>
        {% endif %}
      </div>
      {% if product.tags contains 'sold out' %}
        <div class="flex justify-center items-center font-bold text-white bg-[#DB0032] rounded-cl shadow-mp w-max mb-6 py-1 px-4">SOLD OUT</div>
      {% endif %}
      <div class="mb-4 ds:mb-6">{% render 'judgeme_widgets', widget_type: 'judgeme_preview_badge', jm_style: '', concierge_install: true, product: product %}</div>
      {% comment %} <div id="product-reviews" class="flex items-center mb-4 ds:mb-6">
      </div> {% endcomment %}
      <div class="flex flex-col mb-6 ds:flex-row ds:items-center ds:gap-4 ds:mb-10">
        <div class="flex gap-2 font-bold text-2xl">
            <span class="price text-primary">${ variantPrice }</span>
            <span v-if="variantComparePrice != '$0.00'" class="compare-at-price text-accent-2 line-through">${ variantComparePrice }</span>
        </div>
        <span v-if="variantComparePrice != '$0.00'" class="self-center bg-primary text-white rounded-full px-4">Save ${ savePercent }% (${ saveAmmount })</span> 
      </div>
      {% if product.metafields.custom.mattress_height != blank or product.metafields.custom.mattress_comfort != blank or product.metafields.custom.mattress_type != blank or current_variant.metafields.custom.mattress_height != blank or current_variant.metafields.custom.mattress_comfort != blank or current_variant.metafields.custom.mattress_type != blank %}
        <div class="flex flex-wrap gap-3 mb-6 pt-3 ds:pt-8">
          {% if current_variant.metafields.custom.mattress_height != blank %}
            {% for variant in product.variants %}
              <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Height: {{ variant.metafields.custom.mattress_height }}</div>
            {% endfor %}
          {% elsif product.metafields.custom.mattress_height != blank %}
            <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Height: {{ product.metafields.custom.mattress_height }}</div>
          {% endif %}
          {% if current_variant.metafields.custom.mattress_comfort != blank %}
            {% for variant in product.variants %}
              <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Comfort: {{ variant.metafields.custom.mattress_comfort }}</div>
            {% endfor %}
          {% elsif product.metafields.custom.mattress_comfort != blank %}
            <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Comfort: {{ product.metafields.custom.mattress_comfort }}</div>
          {% endif %}
          {% if current_variant.metafields.custom.mattress_type != blank %}
            {% for variant in product.variants %}
              <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Type: {{ variant.metafields.custom.mattress_type }}</div>
            {% endfor %}
          {% elsif product.metafields.custom.mattress_type != blank %}
            <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Type: {{ product.metafields.custom.mattress_type }}</div>
          {% endif %}
        </div>
      {% endif %}
      {% unless product.tags contains 'sold out' or product.tags contains 'pre order' or product.tags contains 'gift' %}
        <div v-if="variantAvailable == true" class="mb-7">
          <p>Availability: In Stock</p>
          <!-- <div class="flex items-center gap-2">
            {% render 'icons', icon: 'check' %}<span>California</span>
          </div> -->
          <div class="flex items-center gap-2">
            {% if product.tags contains 'closeout' %}{% render 'icons', icon: 'red-delete' %}{% else %}{% render 'icons', icon: 'check' %}{% endif %}<span>Texas</span>
          </div>
          <div class="flex items-center gap-2">
            {% if product.tags contains 'ships local' %}{% render 'icons', icon: 'red-delete' %}{% else %}{% render 'icons', icon: 'check' %}{% endif %}<span>Nationwide</span>
          </div>
        </div>
        <div v-else class="flex justify-center items-center font-bold text-white bg-[#DB0032] rounded-cl shadow-mp w-max mb-6 py-1 px-4">SOLD OUT</div>
      {% endunless %}
      
      {% if product.tags contains 'sold out' %}
        {% form 'contact' %}
          {{ form.errors | default_errors }}
          <div class="flex flex-col gap-4">
            <div>{{ stock }}</div>
            <input type="text" name="contact[name]" id="name" placeholder="Name" class="border-[0.5px] border-secondary rounded-full px-4 py-2" required="required">
            <input type="email" name="contact[email]" id="email" placeholder="Email Address" class="border-[0.5px] border-secondary rounded-full px-4 py-2" required="required">
            <input type="tel" name="contact[phone]" id="phone" placeholder="Phone Number (Optional)" class="border-[0.5px] border-secondary rounded-full px-4 py-2">
            <textarea name="contact[body]" id="message" rows="2" placeholder="Your Message" class="border-[0.5px] border-secondary rounded-cl px-4 py-2"></textarea>
            <input type="submit" value="SUBMIT" class="button cursor-pointer">
          </div>
        {% endform %}
      {% elsif product.tags contains 'pre order'  %}
        <div v-else class="flex justify-center items-center font-bold text-white bg-primary rounded-cl shadow-mp w-max mb-6 py-1 px-4">COMING SOON</div>
        {% form 'contact' %}
          {{ form.errors | default_errors }}
          <div class="flex flex-col gap-4">
            <div>{{ pre_order }}</div>
            <input type="text" name="contact[name]" id="name" placeholder="Name" class="border-[0.5px] border-secondary rounded-full px-4 py-2" required="required">
            <input type="email" name="contact[email]" id="email" placeholder="Email Address" class="border-[0.5px] border-secondary rounded-full px-4 py-2" required="required">
            <input type="tel" name="contact[phone]" id="phone" placeholder="Phone Number (Optional)" class="border-[0.5px] border-secondary rounded-full px-4 py-2">
            <textarea name="contact[body]" id="message" rows="2" placeholder="Your Message" class="border-[0.5px] border-secondary rounded-cl px-4 py-2"></textarea>
            <input type="submit" value="SUBMIT" class="button cursor-pointer">
          </div>
        {% endform %}
      {% elsif product.tags contains 'gift'  %}
        <div>This product is not available for sale. Only available with the purchase of selected mattresses.</div>
      {% else %}
        {% form 'product', product %}
          {% comment %} <div class="flex flex-wrap py-5"> 
            <img src="https://cdn-icons-png.flaticon.com/512/1670/1670915.png" class="h-[25px] mr-[10px] pb-1"/>
            <span class="mr-[5px]">Get it between</span>
            <strong><span id="fromDate"></span> - <span id="toDate"></span></strong>
          </div> {% endcomment %}
          <div>
            <div class="flex flex-col pb-4">
              <template v-for="(option, index) in form.options" :key="index">
                <label :for="option.name">${ option.name }:</label>
                <div>
                  <select v-model="selected[index]" @change="form.selections = selected, changePrice()" class="appearance-none border rounded-full border-primary focus:border-secondary focus:outline-none py-1 pl-4 pr-10" :name="option.name" title="Size Selector">
                      <option disabled value="">Please select one</option>
                      <template v-for="(value, i) in option.values">
                      <option :value="value">${ value }</option>
                      </template>
                  </select>
                </div>
              </template>
            </div>
            <div class="hidden flex-col pb-4 product_select">
              <select name="id" id="productSelect" class="variant-selection__variants appearance-none border rounded-full border-primary focus:border-secondary focus:outline-none py-1 pl-4 pr-10">
                {% for variant in product.variants %}
                    <option v-if="variantID == '{{ variant.id }}'" value="{{ variant.id }}">
                      {{ variant.title }} - {{ variant.price | money_with_currency }} - ${ variantID }
                    </option>
                {% endfor %}
              </select>
            </div>

            {% if quant %}
            <div class="flex flex-col mb-6">
              <label for="quantity">Quantity:</label>
              <div class="relative w-1/2 mm:w-1/4 ml:w-1/5 ts:w-1/3 ds:w-1/4">
                  <button @click="decrement" class="flex items-center absolute inset-y-0 left-0 pl-4" type="button" title="quantity minus">-</button>
                  <input v-model.number="qty" class="text-center appearance-none border rounded-full border-primary focus:border-secondary focus:outline-none w-full py-1 px-8" type="number" name="quantity" min="1" title="quantity input">
                  <button @click="increment" class="flex items-center absolute inset-y-0 right-0 pr-4" type="button" title="quantity plus">+</button>
              </div>
            </div>
            {% endif %}
            <div class="flex flex-col gap-4 mm:flex-row">
              <template v-if="variantAvailable == true">
                <button @click="addToCart" class="addToCartBtn button w-full" title="add to cart">
                <template v-if="addingToCart == false">
                ADD TO CART
                </template>
                <template v-else>
                    <div class="animate-spin rounded-full border-[6px] border-t-primary border-b-secondary border-x-secondary h-8 w-8"></div>
                </template>
                </button>
              </template>
              <template v-else>
                <div class="button-disabled w-full" title="add to cart">
                    SOLD OUT
                </div>
              </template>
            </div>
          </div>
        {% endform %}
      {% endif %}
    </div>
  </div>
</div>

{% if product.description != blank %}  
<div class="mb-10 mx-5 dm:max-w-screen-dm dm:mx-auto dm:px-10 ds:mx-9 dl:px-0">
  <div id="product-description" class="text-text bg-white shadow-sp rounded-cl mb-10 py-6 px-5 ds:py-10 ds:px-10">
  {{ product.description }}
  </div>
</div>

<style>
  #product-description h1,
  #product-description h2,
  #product-description h3,
  #product-description h4,
  #product-description h5,
  #product-description h6 {
    font-weight: revert;
    font-size: revert;
    margin: revert;
  }
  #product-description ol, 
  #product-description ul, 
  #product-description menu {
    list-style: revert;
    margin: revert;
    padding: revert;
  }
  #product-description img {
    margin: auto;
  }
  #product-description a {
    color: #384FAE;
    text-decoration: none;
    font-weight: 600;
  }
  #product-description a:hover {
    text-decoration: underline;
  }
</style>
{% endif %}

<div class="mb-10 mx-5 dm:max-w-screen-dm dm:mx-auto dm:px-10 ds:mx-9 dl:px-0">
  <div class="text-text bg-white shadow-sp rounded-cl mb-10 py-6 px-5 ds:py-10 ds:px-10">
    {% render 'judgeme_widgets', widget_type: 'judgeme_review_widget', concierge_install: true, product: product %}
  </div>
</div>


<script>
var { createApp } = Vue;
const appProduct = createApp({  
  delimiters: ['${', '}'],
  data() {
      const qty = 1,
      id = "",
      variantPrice = "",
      variantComparePrice = "",
      variantID = "",
      saveAmmount = "",
      savePercent = "",
      variants = "",
      variantAvailable = "",
      selected = [],
      addingToCart = false,
      form = {
        selections: "",
        options: ""
      };

    return {
      qty,
      variantPrice,
      variantComparePrice,
      variantID,
      variantAvailable,
      saveAmmount,
      savePercent,
      variants,
      selected,
      addingToCart,
      form
    }
  },

  created() {
  /*Get all product data*/
    fetch("/products/{{ product.handle }}.js")
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error(response.status);
      }
    })
    .then(data => {
      const productData = data;
      const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, vmaximumFractionDigits: 2, });

      this.id = productData.id;
      this.form.options = productData.options.map(item => ({...item, visible: false}));
      this.variants = productData.variants;
      this.variantPrice = formatter.format((productData.variants[0].price/100).toFixed(2));
      this.variantComparePrice = formatter.format((productData.variants[0].compare_at_price/100).toFixed(2));
      this.variantID = productData.variants[0].id;
      this.variantAvailable = productData.variants[0].available;

      this.saveAmmount = formatter.format(((productData.variants[0].compare_at_price - productData.variants[0].price) / 100).toFixed(2));
      this.savePercent = (((productData.variants[0].compare_at_price - productData.variants[0].price) / productData.variants[0].compare_at_price ) * 100).toFixed(2);

       
      productData.options.map(item => this.selected.push(item.values[0]));
      this.form.selections = [
        this.selected[0] ? this.selected[0] : null,
        this.selected[1] ? this.selected[1] : null,
        this.selected[2] ? this.selected[2] : null
      ]
    })
    .catch(error => {
      console.log(error);
    });

  /*Get product reviews*/
  const reqBody = {
      "productIds": [
        {
          "productId": "{{ product.id }}"
        }
      ],
      "apiKey": "pubkey-rGbQ9ej2ru3wpvpU923eB8jXR3S436",
      "storeUrl": "sleepfirstusa.com"
  };

  const requestOptions = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(reqBody),
    redirect: 'follow'
  };

  fetch("http://stamped.io/api/widget/badges?isIncludeBreakdown=true&isincludehtml=true", requestOptions)
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error(response.status);
      }
    })
    .then(data => {
      const reviewContainer = document.getElementById("product-reviews");
      
      reviewContainer.innerHTML = data[0].badge;
    })
    .catch(error => { 
      console.log('error', error)
    });
  },
  methods: {
    //Change Price
    changePrice(e) {
      const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD',  minimumFractionDigits: 2, vmaximumFractionDigits: 2, });
      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });
      this.variantPrice = formatter.format((selectedVariant.price/100).toFixed(2));
      this.variantComparePrice = formatter.format((selectedVariant.compare_at_price/100).toFixed(2));
      this.variantID = selectedVariant.id;
      this.variantAvailable = selectedVariant.available;
      this.saveAmmount = formatter.format(((selectedVariant.compare_at_price - selectedVariant.price) / 100).toFixed(2));
      this.savePercent = (((selectedVariant.compare_at_price - selectedVariant.price) / selectedVariant.compare_at_price ) * 100).toFixed(2);

    },

    //Add to cart funtion
    addToCart(e) {
      e.preventDefault();
      this.addingToCart = true;
      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });

      var data = {
        'items': [{
          id: selectedVariant.id,
          quantity: this.qty
        }]
      };
      var options = {
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      };
      fetch('/cart/add.js', options)
        .then(response => {
          if (response.ok) {
            return response.json()
          } else {
            throw new Error(response.status);
          }
        })
        .then(data => {
          const options = {
              method: "GET"
          };
          fetch("/cart.js", options)
            .then( response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error(response.status);
                }
            })
            .then(data => {
                const cartData = data;
                const counter = document.getElementById('cart-counter');
                const counterMb = document.getElementById('cart-counter-mb');
                counter.textContent = cartData.item_count;
                counterMb.textContent = cartData.item_count;
            })
            .catch(err => {
                console.error("Error:", err)
            });
          this.addingToCart = false;
          const mainDiv = document.getElementById('MainContent');
          mainDiv.insertAdjacentHTML( 'beforeend', `<div id="confirmation-toast" class="flex justify-center items-center gap-2 fixed right-0 left-0 bottom-10 z-[100] text-text bg-white shadow-lp rounded-cl mx-5 p-4 mm:w-max mm:m-auto">
                                        {% render 'icons', icon: 'blue-rounded-check' %}
                                        <p>The product has been added to your cart</p>
                                      </div>`);
          setTimeout(() => {
            document.getElementById('confirmation-toast').remove();
          }, 3000);
        })
        .catch(error => {
          console.log(error)
        });
    },
    buyNow() {
      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });
      window.location.href = '/cart/' + selectedVariant.id + ':' + this.qty;
    },
    increment() {
      this.qty++
    },
    decrement() {
      if (this.qty > 1) {
        this.qty--
      }
    }
  }
});
appProduct.mount('#product')

</script>

<script>
//Product gallery slider

//Thumbs images
const swiper2 = new Swiper('.swiper2', {
    slidesPerView: 3,
    spaceBetween: 12,
    breakpoints: {
      1024: {
        slidesPerView: 4,
        spaceBetween: 20
      },
      480: {
        slidesPerView: 5,
      },
    }     
});

//Main gallery
const swiper = new Swiper('.swiper1', {
  loop: true,
  pagination: {
    el: ".swiper-pagination",
  },  
  navigation: {
    nextEl: '.swiper-button-next',
    prevEl: '.swiper-button-prev',
  },
  thumbs: {
    swiper: swiper2,
  },
});
</script>

{{ '//cdnjs.cloudflare.com/ajax/libs/datejs/1.0/date.min.js' | script_tag }}
<script>
  var fromDate = Date.today().addDays(5);
  if (fromDate.is().saturday() || fromDate.is().sunday()) {
  fromDate = fromDate.next().monday();
  }
  var toDate = Date.today().addDays(10);
  if (toDate.is().saturday() || toDate.is().sunday()) {
  toDate = toDate.next().monday();
  }
  document.getElementById('fromDate').innerHTML = fromDate.toString('dddd MMMM dS');
  document.getElementById('toDate').innerHTML = toDate.toString('dddd MMMM dS');
</script>


{% schema %}
{   
  "name": "Prodct details",
  "settings": [
    {
      "type": "image_picker",
      "id": "desk_banner",
      "label": "Desktop banner image (in case of no metafield image)"
    },
    {
      "type": "image_picker",
      "id": "mob_banner",
      "label": "Mobile banner image (in case of no metafield image)"
    },
    {
      "type": "image_picker",
      "id": "stamp",
      "label": "Stamp"
    },
    {
      "type": "url",
      "id": "stamp_url",
      "label": "Stamp link"
    },
    {
      "type": "checkbox",
      "id": "quantity",
      "label": "Show Quantity selector",
      "default": false
    },
    {
      "type": "textarea",
      "id": "stock",
      "label": "Out of stock message",
      "default": "Not available at this time. This product will be available soon. Please contact us if you would still like to place an order."
    },
    {
      "type": "textarea",
      "id": "pre_order",
      "label": "Pre order message",
      "default": "This product will be available soon. Please contact us if you would like to pre-order it."
    }
  ]
}
{% endschema %}