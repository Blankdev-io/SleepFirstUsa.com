{% liquid
    assign invert = section.settings.invert
    assign product = section.settings.product
    assign accent_color = section.settings.accent_color
    assign product_ann = section.settings.product_ann
    assign ann_text = section.settings.ann_text 
    assign current_variant = section.settings.product.selected_or_first_available_variant
%}

<style>
    .feat-prod-btn:hover {
        background-color: #231F20 !important;
        color: white !important;
    }
    .feat-prod-btn:active {
        background-color: white !important;
        border-color: #231F20 !important;
        border-width: 2px !important;
        color: #231F20 !important;
    }
</style>

<div id="{{ section.id }}" class="featured-product mb-10 mx-5 dm:max-w-screen-dm dm:mx-auto dm:px-10 ds:mx-9 dl:px-0">

    <div class="flex shadow-sm rounded-cl tl:grid tl:grid-cols-5 tl:p-6 {% if invert %}flex-col-reverse{% else %}flex-col{% endif %}" style="background-color:{{ accent_color }};">
        
        {% capture img_block %}
        <a class="relative p-4 tl:flex tl:items-center tl:justify-center tl:col-span-3" href="{{ product.url }}" title="{{ product.title }}">

            {% if product_ann and ann_text != blank %}
            <div class="relative top-0 bg-white px-6 py-2 mm:px-8 tl:absolute {% if invert %}rounded-l-full -mr-4 tl:-right-6 tl:ml-36 tl:-mr-0{% else %}rounded-r-full -ml-4 tl:-left-6 tl:mr-36 tl:-ml-0{% endif %}">
                <span class="flex absolute h-6 w-6 top-0 tl:-mt-1 {% if invert %}-ml-1 left-0{% else %}-mr-1 right-0{% endif %}">
                    <span class="inline-flex absolute rounded-full bg-accent opacity-75 animate-ping h-full w-full"></span>
                    <span class="inline-flex relative rounded-full bg-accent h-6 w-6"></span>
                </span>
                <p class="text-xs mm:text-base">{{ ann_text }}</p>
            </div>
            {% endif %}
            <picture>
                <source media="(min-width: 868px)" srcset="{{ product.featured_image | image_url: width: 630 }}">
                <source media="(min-width: 480px)" srcset="{{ product.featured_image | image_url: width: 700 }}">
                <img class="m-auto w-full h-full max-w-[700px] tl:max-h-[450px]" src="{{ product.featured_image | image_url: width: 410 }}" alt="{{ product.featured_image.alt }}" loading="lazy">
            </picture>
        </a>
        {% endcapture %}

        {% capture content_block %}
        <div class="bg-white rounded-cl p-6 tl:flex tl:flex-col tl:justify-between tl:col-span-2">
          <a href="{{ product.url }}">
            <h2 class="font-bold text-3xl text-text ds:text-title">{{ product.title }}</h2>
          </a>
          {% if product.tags contains 'sold out' %}
            <div class="flex justify-center items-center font-bold text-white bg-[#DB0032] rounded-cl shadow-mp w-max py-1 px-4">SOLD OUT</div>
          {% endif %}
          <div class="flex flex-col divide-y divide-primary gap-3 ds:gap-8">
            <div class="flex flex-col gap-2 ds:gap-6">
              {% render 'judgeme_widgets', widget_type: 'judgeme_preview_badge', jm_style: '', concierge_install: false, product: product %}
              <div class="flex items-center gap-2 flex-wrap ds:gap-4">
                <div class="flex items-end gap-2 font-bold text-2xl ds:gap-4">
                    <span v-if="variantComparePrice != '$0.00'" class="align-baseline text-xl text-accent-4/80 line-through">${ variantComparePrice }</span>
                    <span class="text-3xl text-primary">${ variantPrice }</span>
                </div>
                <span v-if="variantComparePrice != '$0.00'" class="self-center bg-accent-4 text-white rounded-full px-4">-${ savePercent }%</span> 
              </div>
            </div>
            {% if product.metafields.custom.mattress_height != blank or product.metafields.custom.mattress_comfort != blank or product.metafields.custom.mattress_type != blank or current_variant.metafields.custom.mattress_height != blank or current_variant.metafields.custom.mattress_comfort != blank or current_variant.metafields.custom.mattress_type != blank %}
              <div class="flex flex-wrap gap-3 pt-3 ds:pt-8">
                {% if current_variant.metafields.custom.mattress_height != blank %}
                  {% for variant in product.variants %}
                    <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Height: {{ variant.metafields.custom.mattress_height }}</div>
                  {% endfor %}
                {% elsif product.metafields.custom.mattress_height != blank %}
                  <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Height: {{ product.metafields.custom.mattress_height }}</div>
                {% endif %}
                {% if current_variant.metafields.custom.mattress_comfort != blank %}
                  {% for variant in product.variants %}
                    <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Comfort: {{ variant.metafields.custom.mattress_comfort }}</div>
                  {% endfor %}
                {% elsif product.metafields.custom.mattress_comfort != blank %}
                  <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Comfort: {{ product.metafields.custom.mattress_comfort }}</div>
                {% endif %}
                {% if current_variant.metafields.custom.mattress_type != blank %}
                  {% for variant in product.variants %}
                    <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Type: {{ variant.metafields.custom.mattress_type }}</div>
                  {% endfor %}
                {% elsif product.metafields.custom.mattress_type != blank %}
                  <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Type: {{ product.metafields.custom.mattress_type }}</div>
                {% endif %}
              </div>
            {% endif %}
            
            <div class="pt-3 ds:pt-8">
              <div class="flex flex-col pb-4">
                  <template v-for="(option, index) in form.options" :key="index">
                  <label :for="option.name">${ option.name }:</label>
                  <div>                
                      <select v-model="selected[index]" @change="form.selections = selected, changePrice()" class="appearance-none border rounded-full focus:border-secondary focus:outline-none w-fit py-1 pl-4 pr-10" style="border-color:{{ accent_color }};" :name="option.name" title="Size Selector">
                          <option disabled value="">Please select one</option>
                          <template v-for="(value, i) in option.values">
                          <option :value="value">${ value }</option>
                          </template>
                      </select>
                  </div>
                  </template>
              </div>

              <div class="flex flex-col pb-4 tl:mb-20">
                  <label for="quantity">Quantity:</label>
                  <div class="relative w-1/2 mm:w-1/4 ml:w-1/5 ts:w-1/3 ds:w-1/4">
                      <button @click="decrement" class="flex items-center absolute inset-y-0 left-0 pl-4" type="button" title="quantity minus">-</button>
                      <input v-model.number="qty" class="text-center appearance-none border rounded-full focus:border-secondary focus:outline-none w-full py-1 px-8" style="border-color:{{ accent_color }};" type="number" name="quantity" min="1" title="quantity input">
                      <button @click="increment" class="flex items-center absolute inset-y-0 right-0 pr-4" type="button" title="quantity plus">+</button>
                  </div>
              </div>
              <div class="flex flex-col gap-4 mm:flex-row">
                  {% comment %} <button @click="buyNow" class="font-bold rounded-full text-white w-full px-4 py-3" style="background-color:{{ accent_color }};" type="button">BUY NOW</button> {% endcomment %}
                  {% if product.tags contains 'sold out'  %}
                    <button @click="addToCart" class="addToCartBtn button-disabled w-full" title="add to cart" disabled>
                    <template v-if="addingToCart == false">
                    SOLD OUT
                    </template>
                    <template v-else>
                        <div class="animate-spin rounded-full border-[6px] border-t-primary border-b-secondary border-x-secondary h-8 w-8"></div>
                    </template>
                    </button>
                  {% else %}
                    <button @click="addToCart" class="addToCartBtn feat-prod-btn button-custom w-full text-white" title="add to cart" style="background-color:{{ accent_color }};">
                    <template v-if="addingToCart == false">
                    ADD TO CART
                    </template>
                    <template v-else>
                        <div class="animate-spin rounded-full border-[6px] border-t-primary border-b-secondary border-x-secondary h-8 w-8"></div>
                    </template>
                    </button>
                  {% endif %}
              </div>
            </div>
          </div>
        </div>
        {% endcapture %}

        {% if invert %}
            {{ content_block }}
            {{ img_block }}
        {% else %}
            {{ img_block }}
            {{ content_block }}
        {% endif %}
    </div>
</div>

{%- capture initialPosition -%}
  {% for variant in product.variants %}
    {% if variant.title contains 'Queen' %}
      {% assign initialPosition = forloop.index0 %}
    {% endif %}
  {% endfor %}
  {% if product.options.size > 1 %}
    {% assign initialPosition = 0 %}
  {% endif %}
  {{ initialPosition }}
{%- endcapture -%}

<script>
var { createApp } = Vue; 
const section{{ product.id }} = createApp({
    delimiters: ['${', '}'],
  data() {
      const qty = 1,
      variantPrice = "",
      variantComparePrice = "",
      variantID = "",
      saveAmmount = "",
      savePercent = "",
      variants = "",
      initialPosition = {{ initialPosition }},
      selected = [],
      addingToCart = false,
      form = {
        selections: "",
        options: ""
      };
    return {
      qty,
      variantPrice,
      variantComparePrice,
      variantID,
      saveAmmount,
      savePercent,
      variants,
      initialPosition,
      selected,
      addingToCart,
      form
    }
  },

  //Get all product data
  created() {
    
    fetch("/products/{{ product.handle }}.js")
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw error
        }
      })
      .then(data => {
        const productData = data;
        const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, vmaximumFractionDigits: 2, });

        this.form.options = productData.options.map(item => ({...item, visible: false}));
        this.variants = productData.variants;
        this.variantPrice = formatter.format((productData.variants[this.initialPosition].price/100).toFixed(2));
        this.variantComparePrice = formatter.format((productData.variants[this.initialPosition].compare_at_price/100).toFixed(2));
        this.variantID = productData.variants[this.initialPosition].id;

        this.saveAmmount = formatter.format(((productData.variants[this.initialPosition].compare_at_price - productData.variants[this.initialPosition].price) / 100).toFixed(2));
        this.savePercent = (((productData.variants[this.initialPosition].compare_at_price - productData.variants[this.initialPosition].price) / productData.variants[this.initialPosition].compare_at_price ) * 100).toFixed(2);

        productData.options.map(item => this.selected.push(item.values[this.initialPosition]));
        this.form.selections = [
          this.selected[0] ? this.selected[0] : null,
          this.selected[1] ? this.selected[1] : null,
          this.selected[2] ? this.selected[2] : null
        ]
      })
      .catch(error => {
        console.log(error);
      });

  /*Get product reviews*/
  const reqBody = {
      "productIds": [
        {
          "productId": "{{ product.id }}"
        }
      ],
      "apiKey": "pubkey-rGbQ9ej2ru3wpvpU923eB8jXR3S436",
      "storeUrl": "sleepfirstusa.com"
  };

  const requestOptions = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(reqBody),
    redirect: 'follow'
  };

  fetch("http://stamped.io/api/widget/badges?isIncludeBreakdown=true&isincludehtml=true", requestOptions)
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error(response.status);
      }
    })
    .then(data => {
      const reviewContainer = document.getElementById("product-{{ product.id }}-reviews");
      
      if(reviewContainer) {
        reviewContainer.innerHTML = data[0].badge;
      }
    })
    .catch(error => { 
      console.log('error', error)
    });
  },

  methods: {
    //Change Price
    changePrice(e) {
      const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD',  minimumFractionDigits: 2, vmaximumFractionDigits: 2, });
      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });
      this.variantPrice = formatter.format((selectedVariant.price/100).toFixed(2));
      this.variantComparePrice = formatter.format((selectedVariant.compare_at_price/100).toFixed(2));
      this.variantID = selectedVariant.id;
      this.saveAmmount = formatter.format(((selectedVariant.compare_at_price - selectedVariant.price) / 100).toFixed(2));
      this.savePercent = (((selectedVariant.compare_at_price - selectedVariant.price) / selectedVariant.compare_at_price ) * 100).toFixed(2);
    },

    //Add to cart funtion
    addToCart(e) {
      e.preventDefault();
      this.addingToCart = true;

      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });

      var data = {
        'items': [{
          id: selectedVariant.id,
          quantity: this.qty
        }]
      };
      var options = {
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      };
      fetch('/cart/add.js', options)
        .then(response => {
          if (response.ok) {
            return response.json()
          } else {
            throw new Error(response.status);
          }
        })
        .then(data => {
          const options = {
              method: "GET"
          };
          fetch("/cart.js", options)
            .then( response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error(response.status);
                }
            })
            .then(data => {
                const cartData = data;
                const counter = document.getElementById('cart-counter');
                const counterMb = document.getElementById('cart-counter-mb');
                counter.textContent = cartData.item_count;
                counterMb.textContent = cartData.item_count;
            })
            .catch(err => {
                console.error("Error:", err)
            });
            this.addingToCart = false;
            const mainDiv = document.getElementById('MainContent');
            mainDiv.insertAdjacentHTML( 'beforeend', `<div id="confirmation-toast" class="flex justify-center items-center gap-2 fixed right-0 left-0 bottom-10 z-[100] text-text bg-white shadow-lp rounded-cl mx-5 p-4 mm:w-max mm:m-auto">
                                          {% render 'icons', icon: 'blue-rounded-check' %}
                                          <p>The product has been added to your cart</p>
                                        </div>`);
            setTimeout(() => {
              document.getElementById('confirmation-toast').remove();
            }, 3000);
        })
        .catch(error => {
          console.log(error)
        });

    },
    buyNow() {
      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });
      window.location.href = '/cart/' + selectedVariant.id + ':' + this.qty;
    },
    increment() {
      this.qty++
    },
    decrement() {
      if (this.qty > 1) {
        this.qty--
      }
    }
  }
});
section{{ product.id }}.mount('#{{ section.id }}')

</script>

{% schema %}
    {
        "name": "Featured Product",
        "settings": [
            {
                "type": "checkbox",
                "id": "invert",
                "label": "Invert Elements",
                "default": false
            },
            {
                "type": "checkbox",
                "id": "product_ann",
                "label": "Product announcement",
                "default": false
            },
            {
                "type": "text",
                "id": "ann_text",
                "label": "Announcement text"
            },
            {
                "type": "product",
                "id": "product",
                "label": "Select a Product"
            },
            {
                "type": "color",
                "id": "accent_color",
                "label": "Accent color"
            }
        ],
        "presets": [
            {
                "name": "Featured Product"
            }
        ]
    }
{% endschema %}