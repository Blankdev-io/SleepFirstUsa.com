{% liquid
  assign desk_banner = section.settings.desk_banner
  assign mob_banner = section.settings.mob_banner
  assign current_variant = product.selected_or_first_available_variant
  assign featured_image = current_variant.featured_image | default: product.featured_image 
  assign stamp = section.settings.stamp
  assign stamp_message = section.settings.stamp_message
  assign stamp_url = section.settings.stamp_url
  assign model = section.settings.model
  assign model_list = section.settings.model_list
  assign quant = section.settings.quantity
  assign img = section.settings.img
  assign stock = section.settings.stock
  assign pre_order = section.settings.pre_order
  assign upsell_title = section.settings.upsell_title
  assign product_list = section.settings.product_list
%}

<div id="product" class="mb-10 mx-5 dm:max-w-screen-dm dm:mx-auto dm:px-10 ds:mx-9 dl:px-0">

  {% if product.metafields.banner.images != blank %}    
  <div class="mb-6">
    <picture>
      {% for elem in product.metafields.banner.images.value %}
        {% if forloop.index == 1 %}
            <source media="(min-width: 568px)" srcset="{{ elem | image_url }}">
        {% else %}
            <img class="rounded-cl w-full h-full" src="{{ elem | image_url }}" alt="{{ elem.alt | escape }}" title="{{ elem.alt | escape }}" loading="lazy">
        {% endif %}
      {% endfor %}
    </picture>
  </div>
  {% elsif mob_banner != blank and desk_banner != blank %}
  <div class="mb-6">
    <picture>
      <source media="(min-width: 568px)" srcset="{{ desk_banner | image_url }}">
      <img class="rounded-cl w-full h-full" src="{{ mob_banner | image_url }}" alt="{{ mob_banner | escape }}" title="{{ mob_banner.alt | escape }}" loading="lazy">
    </picture>
  </div>
  {% endif %}

  <div class="flex flex-col gap-6 ds:flex-row ds:gap-8">
    <div class="ds:sticky ds:top-44 ds:h-max ds:pr-3 ds:w-1/2">

      <div class="swiper swiper1 bg-white shadow-sp rounded-cl w-full mb-6">
        <div class="swiper-wrapper items-center">

          {% for image in product.images %}
            <picture class="swiper-slide swiper-lazy">
                <source media="(min-width: 1024px)" srcset="{{ image | image_url: width: 550 }}">
                <source media="(min-width: 768px)" srcset="{{ image | image_url: width: 990 }}">
                <source media="(min-width: 480px)" srcset="{{ image | image_url: width: 730 }}">
                <img class="w-full max-h-[500px] tl:max-h-[700px] ds:max-h-[600px]" src="{{ image | image_url: width: 440 }}" alt="{{ image.alt | escape }}" title="{{ product.title | escape }}" id="ProductPhotoImg">
            </picture>
          {% endfor %}    

        </div>
        <div class="swiper-pagination swiper-pagination-bullets swiper-pagination-horizontal">
          {% for image in product.images %}
            <span class="swiper-pagination-bullet"></span>
          {% endfor %}
        </div>              
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
      </div>

      <div class="swiper swiper2 h-24 mb-6">
        <div class="swiper-wrapper">
        {% for image in product.images %}
          <div class="swiper-slide flex items-center bg-white rounded-cl" >
            <img class="shadow-sp rounded-cl object-cover mx-auto h-24" src="{{ image | image_url: height: 100 }}" title="{{ product.title | escape }}" alt="{{ image.alt | escape }}">
          </div>
        {% endfor %}
        </div>
      </div>

      <div class="flex flex-col justify-between gap-2 ds:flex-row">
        <div onclick="showLocatorPopup('store-locator-popup')" title="FIND MY STORE" class="flex flex-col cursor-pointer rounded-cl shadow-sp w-full">
          <div class="flex justify-around items-center gap-4 bg-white rounded-t-cl p-4">
            <span>{% render 'icons', icon: 'map' %}</span>
            <div class="flex flex-col justify-center items-center gap-1 mm:gap-2">
              <span class="text-center ds:text-lg">Experience personalized service when you visit our locally owned stores.</span>
            </div>
          </div>
          <div class="text-center text-white bg-secondary rounded-b-cl w-full p-2">Find Your Nearest Store</div>
        </div>
      </div>

    </div>

    <div id="product-details" class="flex flex-col gap-2 bg-white shadow-sp rounded-cl p-4 ds:gap-6 ds:sticky ds:top-44 ds:h-max ds:p-6 ds:w-1/2 dl:p-8">
      <h1 class="font-extrabold text-3xl text-text ds:text-title">{{ product.title }}</h1>
      {% if product.tags contains 'sold out' %}
        <div class="flex justify-center items-center font-bold text-white bg-[#DB0032] rounded-cl shadow-mp w-max py-1 px-4">SOLD OUT</div>
      {% endif %}
      <div class="flex flex-col divide-y divide-primary gap-3 ds:gap-8">
        <div class="flex flex-col gap-2 ds:gap-6">
          {% render 'judgeme_widgets', widget_type: 'judgeme_preview_badge', jm_style: '', concierge_install: true, product: product %}
          {% if stamp != blank %}
            <p class="flex items-center gap-2">
              <img src="{{ stamp | image_url: width: 40 }}" class="w-10" alt="{{ Stamp.alt }}">
              <span class="text-accent-4 italic">{{ stamp_message }}</span>
              <a href="{{ stamp_url }}" title="{{ stamp_url.title }}"><span class="text-sm text-primary underline">Details</span></a>
            </p>
          {% endif %}
          <div class="flex items-center gap-2 flex-wrap ds:gap-4">
            <div class="flex items-end gap-2 font-bold text-2xl ds:gap-4">
                <span v-if="variantComparePrice != '$0.00'" class="align-baseline text-xl text-accent-4/80 line-through">${ variantComparePrice }</span>
                <span class="text-3xl text-primary">${ variantPrice }</span>
            </div>
            <span v-if="variantComparePrice != '$0.00'" class="self-center bg-accent-4 text-white rounded-full px-4">-${ savePercent }%</span> 
          </div>
        </div>
        {% if product.metafields.custom.mattress_height != blank or product.metafields.custom.mattress_comfort != blank or product.metafields.custom.mattress_type != blank or current_variant.metafields.custom.mattress_height != blank or current_variant.metafields.custom.mattress_comfort != blank or current_variant.metafields.custom.mattress_type != blank %}
          <div class="flex flex-wrap gap-3 pt-3 ds:pt-8">
            {% if current_variant.metafields.custom.mattress_height != blank %}
              {% for variant in product.variants %}
                <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Height: {{ variant.metafields.custom.mattress_height }}</div>
              {% endfor %}
            {% elsif product.metafields.custom.mattress_height != blank %}
              <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Height: {{ product.metafields.custom.mattress_height }}</div>
            {% endif %}
            {% if current_variant.metafields.custom.mattress_comfort != blank %}
              {% for variant in product.variants %}
                <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Comfort: {{ variant.metafields.custom.mattress_comfort }}</div>
              {% endfor %}
            {% elsif product.metafields.custom.mattress_comfort != blank %}
              <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Comfort: {{ product.metafields.custom.mattress_comfort }}</div>
            {% endif %}
            {% if current_variant.metafields.custom.mattress_type != blank %}
              {% for variant in product.variants %}
                <div v-if="variantID == '{{ variant.id }}'" class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Type: {{ variant.metafields.custom.mattress_type }}</div>
              {% endfor %}
            {% elsif product.metafields.custom.mattress_type != blank %}
              <div class="flex justify-center items-center bg-white rounded-cl shadow-mp w-max py-2 px-4"><span class="mr-2">{% render 'icons', icon: 'blue-point' %}</span> Type: {{ product.metafields.custom.mattress_type }}</div>
            {% endif %}
          </div>
        {% endif %}
        {% unless product.tags contains 'sold out' or product.tags contains 'pre order' %}
          <div v-if="variantAvailable == true" class="pt-3 ds:pt-8">
            <p class="pb-2 font-bold">Availability: <span class="bg-accent rounded-full text-accent-5 px-4 py-1">In Stock</span></p>
            <div class="ds:flex ds:gap-10 dl:gap-14">
              <!-- <div class="flex items-center gap-2">
                {% render 'icons', icon: 'check' %}<a href="https://goo.gl/maps/Z6jLV8i6phbgbrXt9" title="California Store">California</a>
              </div> -->
              <div class="flex items-center gap-2">
                {% if product.tags contains 'closeout' %}{% render 'icons', icon: 'red-delete' %}{% else %}{% render 'icons', icon: 'check' %}{% endif %}<a href="https://goo.gl/maps/tnx4MSrMmrDPmEqu5" title="Texas Store">Texas</a>
              </div>
              <div class="flex items-center gap-2">
                {% if product.tags contains 'ships local' %}{% render 'icons', icon: 'red-delete' %}{% else %}{% render 'icons', icon: 'check' %}{% endif %}<span onclick="showLocatorPopup('store-locator-popup')" class="cursor-pointer">Nationwide</span>
              </div>
            </div>
          </div>
          <div v-else class="flex justify-center items-center font-bold text-white bg-[#DB0032] rounded-cl shadow-mp w-max mb-6 py-1 px-4">SOLD OUT</div>
        {% endunless %}

        {% if product.tags contains 'sold out'  %}
          {% form 'contact' %}
            {{ form.errors | default_errors }}
            <div class="flex flex-col gap-4">
              <div>{{ stock }}</div>
              <input type="text" name="contact[name]" id="name" placeholder="Name" class="border-[0.5px] border-secondary rounded-full px-4 py-2" required="required">
              <input type="email" name="contact[email]" id="email" placeholder="Email Address" class="border-[0.5px] border-secondary rounded-full px-4 py-2" required="required">
              <input type="tel" name="contact[phone]" id="phone" placeholder="Phone Number (Optional)" class="border-[0.5px] border-secondary rounded-full px-4 py-2">
              <textarea name="contact[body]" id="message" rows="2" placeholder="Your Message" class="border-[0.5px] border-secondary rounded-cl px-4 py-2"></textarea>
              <input type="submit" value="SUBMIT" class="button cursor-pointer">
            </div>
          {% endform %}
          {% elsif product.tags contains 'pre order' %}
            <div v-else class="flex justify-center items-center font-bold text-white bg-primary rounded-cl shadow-mp w-max mb-6 py-1 px-4">COMING SOON</div>
            {% form 'contact' %}
              {{ form.errors | default_errors }}
              <div class="flex flex-col gap-4">
                <div>{{ pre_order }}</div>
                <input type="text" name="contact[name]" id="name" placeholder="Name" class="border-[0.5px] border-secondary rounded-full px-4 py-2" required="required">
                <input type="email" name="contact[email]" id="email" placeholder="Email Address" class="border-[0.5px] border-secondary rounded-full px-4 py-2" required="required">
                <input type="tel" name="contact[phone]" id="phone" placeholder="Phone Number (Optional)" class="border-[0.5px] border-secondary rounded-full px-4 py-2">
                <textarea name="contact[body]" id="message" rows="2" placeholder="Your Message" class="border-[0.5px] border-secondary rounded-cl px-4 py-2"></textarea>
                <input type="submit" value="SUBMIT" class="button cursor-pointer">
              </div>
            {% endform %}
        {% else %}
          {% form 'product', product %}
          {% comment %} <div class="flex flex-wrap border-b border-b-primary py-5 w-full"> 
            <img src="https://cdn-icons-png.flaticon.com/512/1670/1670915.png" class="h-[25px] mr-[10px] pb-1"/>
            <span class="mr-[5px]">Get it between</span>
            <strong><span id="fromDate"></span> - <span id="toDate"></span></strong>
          </div> {% endcomment %}
          <div>
            {% if section.blocks.size != 0 %}
              <div class="flex flex-col gap-2 pt-3 ds:pt-8">
                <div class="flex items-center gap-2">
                  <div class="font-bold">Model</div>
                  <a href="#compare-chart" title="Compare Models" class="text-sm text-primary italic underline">Compare Models</a>
                </div>
                <div class="flex flex-wrap gap-y-2 gap-x-4">
                  {% for block in section.blocks %}
                    {% liquid 
                        assign model_name = block.settings.model_name
                        assign model_list = block.settings.model_list
                        assign model_url = block.settings.model_url
                    %}
                    <a href="{{ model_url }}" title="{{ model_name }}" class="align-middle button-white {% for model in model_list %}{% if model.url == product.url %}!bg-primary !text-white hover:!bg-hover active:!bg-white active:!border-primary active:!text-primary{% endif %}{% endfor %} font-normal cursor-pointer px-5 h-8">{{ model_name }}</a>
                  {% endfor %}
                </div>
              </div>
            {% endif %}
            <div id="product-options" class="flex flex-col gap-2 pb-4 pt-3 ds:py-8">
              <template v-for="(option, index) in form.options" :key="index">
                <div class="font-bold">${ option.name }</div>
                <div class="flex flex-wrap gap-y-2 gap-x-4">
                  <template v-for="(value, i) in option.values">
                      <input v-if="i == 0" v-model="selected[index]" @change="form.selections = selected, changePrice(), upsellUpdate()" type="radio" :name="option.name" :id="value" :value="value" class="hidden border-secondary rounded focus:ring-0 w-5 h-5" checked>
                      <input v-else v-model="selected[index]" @change="form.selections = selected, changePrice(), upsellUpdate()" type="radio" :name="option.name" :id="value" :value="value" class="hidden border-secondary rounded focus:ring-0 w-5 h-5">
                      <label :for="value" class="align-middle button-white font-normal cursor-pointer px-5 h-8">${ value }</label>
                  </template>
                </div>
              </template>
            </div>
            
            {% if product_list != blank %}
            <div class="flex flex-col">
              <div class="font-bold mb-2">{{ upsell_title }}</div>
              
              <div class="flex flex-col justify-between items-center gap-2 mb-6 mm:flex-row mm:h-[150px] mm:mb-4 ml:gap-4">
                <div class="flex items-center gap-2 ml:gap-4">
                  <img class="object-cover rounded-cl w-[90px] mm:w-[100px] ml:w-[110px] dl:w-[150px]" :src="upsellProducts[0].featured_image + '&width=150'" :alt="upsellProducts[0].title">
                  <div class="flex flex-col justify-between gap-2 ml:gap-4">
                    {% for item in product_list %}
                    {% if forloop.index == 1  %}
                      {% render 'judgeme_widgets', widget_type: 'judgeme_preview_badge', jm_style: '', concierge_install: true, product: item %}
                      {% break %}
                    {% endif %}                    
                    {% endfor %}
                    <a class="font-bold text-sm line-clamp-1 ml:text-base" :href="upsellProducts[0].url" :title="upsellProducts[0].title">${ upsellProducts[0].title }</a>
                      <div v-if="upsellProducts[0].compare_at_price != '$0.00'" class="font-bold text-white text-xs bg-accent-4 rounded-full max-w-max py-1 px-2 ml:py-2 ml:px-4">Save ${ upsellProducts[0].price_min }</div>
                    <div class="flex items-center gap-4">
                        <span v-if="upsellProducts[0].compare_at_price != '$0.00'" class="text-sm text-accent-4/50 line-through ml:text-base">${ upsellProducts[0].compare_at_price }</span>
                      <span class="text-lg text-primary ml:text-xl">${ upsellProducts[0].price }</span>
                    </div>
                  </div>
                </div>
                <button class="addToCartBtn group button-white align-middle gap-2 font-normal cursor-pointer px-5 h-8" @click="upsellAdd($event, upsellProducts[0].id)"><span class="font-black text-primary text-2xl group-hover:text-white">+</span>Add</button>
              </div>

              <div class="flex flex-col justify-between items-center gap-2 mb-6 mm:flex-row mm:h-[150px] mm:mb-4 ml:gap-4">
                <div class="flex items-center gap-2 ml:gap-4">
                  <img class="object-cover rounded-cl w-[90px] mm:w-[100px] ml:w-[110px] dl:w-[150px]" :src="upsellProducts[1].featured_image + '&width=150'" :alt="upsellProducts[1].title">
                  <div class="flex flex-col justify-between gap-2 ml:gap-4">
                    {% for item in product_list %}
                    {% if forloop.index == 2  %}
                      {% render 'judgeme_widgets', widget_type: 'judgeme_preview_badge', jm_style: '', concierge_install: true, product: item %}
                      {% break %}
                    {% endif %}                    
                    {% endfor %}
                    <a class="font-bold text-sm line-clamp-1 ml:text-base" :href="upsellProducts[1].url" :title="upsellProducts[1].title">${ upsellProducts[1].title }</a>
                      <div v-if="upsellProducts[1].compare_at_price != '$0.00'" class="font-bold text-white text-xs bg-accent-4 rounded-full max-w-max py-1 px-2 ml:py-2 ml:px-4">Save ${ upsellProducts[1].price_min }</div>
                    <div class="flex items-center gap-4">
                        <span v-if="upsellProducts[1].compare_at_price != '$0.00'" class="text-sm text-accent-4/50 line-through ml:text-base">${ upsellProducts[1].compare_at_price }</span>
                      <span class="text-lg text-primary ml:text-xl">${ upsellProducts[1].price }</span>
                    </div>
                  </div>
                </div>
                <button class="addToCartBtn group button-white align-middle gap-2 font-normal cursor-pointer px-5 h-8" @click="upsellAdd($event, upsellProducts[1].id)"><span class="font-black text-primary text-2xl group-hover:text-white">+</span>Add</button>
              </div>

              <div class="flex flex-col justify-between items-center gap-2 mb-6 mm:flex-row mm:h-[150px] mm:mb-4 ml:gap-4">
                <div class="flex items-center gap-2 ml:gap-4">
                  <img class="object-cover rounded-cl w-[90px] mm:w-[100px] ml:w-[110px] dl:w-[150px]" :src="upsellProducts[2].featured_image + '&width=150'" :alt="upsellProducts[2].title">
                  <div class="flex flex-col justify-between gap-2 ml:gap-4">
                    {% for item in product_list %}
                    {% if forloop.index == 3  %}
                      {% render 'judgeme_widgets', widget_type: 'judgeme_preview_badge', jm_style: '', concierge_install: true, product: item %}
                      {% break %}
                    {% endif %}                    
                    {% endfor %}
                    <a class="font-bold text-sm line-clamp-1 ml:text-base" :href="upsellProducts[2].url" :title="upsellProducts[2].title">${ upsellProducts[2].title }</a>
                      <div v-if="upsellProducts[2].compare_at_price != '$0.00'" class="font-bold text-white text-xs bg-accent-4 rounded-full max-w-max py-1 px-2 ml:py-2 ml:px-4">Save ${ upsellProducts[2].price_min }</div>
                    <div class="flex items-center gap-4">
                        <span v-if="upsellProducts[2].compare_at_price != '$0.00'" class="text-sm text-accent-4/50 line-through ml:text-base">${ upsellProducts[2].compare_at_price }</span>
                      <span class="text-lg text-primary ml:text-xl">${ upsellProducts[2].price }</span>
                    </div>
                  </div>
                </div>
                <button class="addToCartBtn group button-white align-middle gap-2 font-normal cursor-pointer px-5 h-8" @click="upsellAdd($event, upsellProducts[2].id)"><span class="font-black text-primary text-2xl group-hover:text-white">+</span>Add</button>
              </div>
            </div>
            {% endif %}


            {% if quant %}
            <div class="flex flex-col mb-6">
              <label for="quantity">Quantity</label>
              <div class="relative w-1/2 mm:w-1/4 ml:w-1/5 ts:w-1/3 ds:w-1/4">
                  <button @click="decrement" class="flex items-center absolute inset-y-0 left-0 pl-4" type="button" title="quantity minus">-</button>
                  <input v-model.number="qty" class="text-center appearance-none border rounded-full border-primary focus:border-secondary focus:outline-none w-full py-1 px-8" type="number" name="quantity" min="1" title="quantity input">
                  <button @click="increment" class="flex items-center absolute inset-y-0 right-0 pr-4" type="button" title="quantity plus">+</button>
              </div>
            </div>
            {% endif %}

            {%- comment -%}Main add to cart button{%- endcomment -%}
            <div class="flex flex-col gap-4 mm:flex-row">
              <template v-if="variantAvailable == true">
                <button id="addToCartBtn" @click="addToCart" class="addToCartBtn button w-full" title="add to cart">
                <template v-if="addingToCart == false">
                ADD TO CART
                </template>
                <template v-else>
                    <div class="animate-spin rounded-full border-[6px] border-t-primary border-b-secondary border-x-secondary h-8 w-8"></div>
                </template>
                </button>
              </template>
              <template v-else>
                <div class="button-disabled w-full" title="add to cart">
                    SOLD OUT
                </div>
              </template>
            </div>
          </div>
          {% endform %}
        {% endif %}
      </div>
    </div>
  </div>
</div>

{% comment %} Store Locator {% endcomment %}
<div id="store-locator-background" onclick="showLocatorPopup('store-locator-popup')" class="fixed z-50 top-0 right-0 transition-all duration-300 ease-in-out invisible opacity-0 backdrop-blur-[2px] bg-gray-600/50 w-screen h-screen"></div>
<div id="store-locator-popup" class="flex justify-center fixed z-[60] top-12 right-0 transition-all duration-300 ease-in-out invisible opacity-0 w-screen h-max">
  <div class="w-full mx-5 mb-10 dm:max-w-screen-dm dm:mx-auto dm:px-10 ds:mx-9 dl:px-0">
    <div class="relative text-text bg-white shadow-sp rounded-cl w-full mb-8 p-8 ds:mb-10 ds:p-10">
      <span onclick="showLocatorPopup('store-locator-popup')" title="Delete" class="absolute right-4 top-4 cursor-pointer">{% render 'icons', icon: 'delete' %}</span>
      <!-- Start Stockist.co widget -->
      <div data-stockist-widget-tag="u7981">Loading store locator
      from <a href="https://stockist.co">Stockist store locator</a>...</div>
      <script>
      (function(s,t,o,c,k){c=s.createElement(t);c.src=o;c.async=1;
      k=s.getElementsByTagName(t)[0];k.parentNode.insertBefore(c,k);
      })(document,'script','//stockist.co/embed/v1/widget.min.js');
      </script>
      <!-- End Stockist.co widget -->
    </div>
  </div>
</div>

{% comment %} Default Variant {% endcomment %}
{%- capture initialPosition -%}
  {% for variant in product.variants %}
    {% if variant.title contains 'Queen' %}
      {% assign initialPosition = forloop.index0 %}
    {% endif %}
  {% endfor %}
  {% if product.options.size > 1 or product.type != 'Mattresses' %}
    {% assign initialPosition = 0 %}
  {% endif %}
  {{ initialPosition }}
{%- endcapture -%}

{% comment %} CSS {% endcomment %}
<style>
    #product-options input[type=radio]:checked + label {
        color: white;
        background-color: #384FAE;
    }
</style>

{% comment %} Js {% endcomment %}
<script>
    function showLocatorPopup(id) {
        var x = document.getElementById(id);
        const y = document.getElementById('store-locator-background');
        if (x.classList.contains('invisible')) {
            x.classList.remove('invisible');
            x.classList.add('visible');
            x.classList.remove('opacity-0');
            x.classList.add('opacity-100');
            y.classList.remove('invisible');
            y.classList.add('visible');
            y.classList.remove('opacity-0');
            y.classList.add('opacity-100');
        } else {
            x.classList.remove('visible');
            x.classList.add('invisible');
            x.classList.remove('opacity-100');
            x.classList.add('opacity-0');
            y.classList.remove('visible');
            y.classList.add('invisible');
            y.classList.remove('opacity-100');
            y.classList.add('opacity-0');
        }
    }
</script>

{% comment %} Vue {% endcomment %}
<script>
var { createApp } = Vue;
const appProduct = createApp({  
  delimiters: ['${', '}'],
  data() {
      const qty = 1,
      id = "",
      variantPrice = "",
      variantComparePrice = "",
      variantID = "",
      saveAmmount = "",
      savePercent = "",
      variants = "",
      initialPosition = {{ initialPosition }},
      variantAvailable = "",
      selected = [],
      addingToCart = false,
      form = {
        selections: "",
        options: ""
      }{%- if product_list != blank -%},{%- else -%};{%- endif -%}
      {%- if product_list != blank -%}
      upsellProducts = {{ product_list | json }};
      {%- endif -%}
    return {
      qty,
      variantPrice,
      variantComparePrice,
      variantID,
      variantAvailable,
      saveAmmount,
      savePercent,
      variants,
      initialPosition,
      selected,
      addingToCart,
      form,
      upsellProducts
    }
  },

  created() {
  /*Get all product data*/
    fetch("/products/{{ product.handle }}.js")
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error(response.status);
      }
    })
    .then(data => {
      const productData = data;
      const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, vmaximumFractionDigits: 2, });

      this.id = productData.id;
      this.form.options = productData.options.map(item => ({...item, visible: false}));
      this.variants = productData.variants;
      this.variantPrice = formatter.format((productData.variants[this.initialPosition].price/100).toFixed(2));
      this.variantComparePrice = formatter.format((productData.variants[this.initialPosition].compare_at_price/100).toFixed(2));
      this.variantID = productData.variants[this.initialPosition].id;
      this.variantAvailable = productData.variants[this.initialPosition].available;

      this.saveAmmount = formatter.format(((productData.variants[this.initialPosition].compare_at_price - productData.variants[this.initialPosition].price) / 100).toFixed(2));
      this.savePercent = (((productData.variants[this.initialPosition].compare_at_price - productData.variants[this.initialPosition].price) / productData.variants[this.initialPosition].compare_at_price ) * 100).toFixed(2);
       
      productData.options.map(item => this.selected.push(item.values[this.initialPosition]));
      this.form.selections = [
        this.selected[0] ? this.selected[0] : null,
        this.selected[1] ? this.selected[1] : null,
        this.selected[2] ? this.selected[2] : null
      ]
    })
    .catch(error => {
      console.log(error);
    });

  /*Get upsell products*/
    console.log(this.upsellProducts);
    console.log(this.selected);

    for (const [index, product] of this.upsellProducts.entries()) { 

      const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, vmaximumFractionDigits: 2, });

      product.id = product.variants[0].id
      product.price = formatter.format((product.price/100).toFixed(2));
      product.compare_at_price = formatter.format((product.compare_at_price/100).toFixed(2));

      for (const variant of product.variants) {
        variant.price = formatter.format((variant.price/100).toFixed(2));
        variant.compare_at_price = formatter.format((variant.compare_at_price/100).toFixed(2));
      }
      if (product.compare_at_price != '$0.00') {
        const price = product.price.replace('$', '');
        const comparePrice = product.compare_at_price.replace('$', '');
        const save = parseFloat(comparePrice.replace(/,/g, '')) - parseFloat(price.replace(/,/g, ''));
        console.log(formatter.format(parseFloat(save)));
        product.price_min = formatter.format(parseFloat(save));
      } else {
        product.price_min = '$0.00';
      };
    };
  },
  methods: {
    //Change Price
    changePrice(e) {
      const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD',  minimumFractionDigits: 2, vmaximumFractionDigits: 2, });
      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });
      if (selectedVariant.available == false) {
        this.variantPrice = "Not Available";
        this.variantComparePrice = "$0.00";
      } else {
        this.variantPrice = formatter.format((selectedVariant.price/100).toFixed(2));
        this.variantComparePrice = formatter.format((selectedVariant.compare_at_price/100).toFixed(2));
      }
      this.variantID = selectedVariant.id;
      this.variantAvailable = selectedVariant.available;
      this.saveAmmount = formatter.format(((selectedVariant.compare_at_price - selectedVariant.price) / 100).toFixed(2));
      this.savePercent = (((selectedVariant.compare_at_price - selectedVariant.price) / selectedVariant.compare_at_price ) * 100).toFixed(2);
    },

    //Add to cart funtion
    addToCart(e) {
      e.preventDefault();
      this.addingToCart = true;

      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });

      var data = {
        'items': [
          {
            id: selectedVariant.id,
            quantity: this.qty,
            properties: {
            }
          }
        ]
      };
      var options = {
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      };
      fetch('/cart/add.js', options)
        .then(response => {
          if (response.ok) {
            return response.json()
          } else {
            throw new Error(response.status);
          }
        })
        .then(data => {
          const options = {
              method: "GET"
          };
          fetch("/cart.js", options)
            .then( response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error(response.status);
                }
            })
            .then(data => {
                const cartData = data;
                const counter = document.getElementById('cart-counter');
                const counterMb = document.getElementById('cart-counter-mb');
                counter.textContent = cartData.item_count;
                counterMb.textContent = cartData.item_count;
            })
            .catch(err => {
                console.error("Error:", err)
            });
          this.addingToCart = false;
          const mainDiv = document.getElementById('MainContent');
          mainDiv.insertAdjacentHTML( 'beforeend', `<div id="confirmation-toast" class="flex justify-center items-center gap-2 fixed right-0 left-0 bottom-10 z-[100] text-text bg-white shadow-lp rounded-cl mx-5 p-4 mm:w-max mm:m-auto">
                                        {% render 'icons', icon: 'blue-rounded-check' %}
                                        <p>The product has been added to your cart</p>
                                      </div>`);
          setTimeout(() => {
            document.getElementById('confirmation-toast').remove();
          }, 3000);
        })
        .catch(error => {
          console.log(error)
        });
    },
    buyNow() {
      let selectedVariant;
      this.variants.forEach(variant => {
        if (variant.option1 == this.form.selections[0] && variant.option2 == this.form.selections[1] && variant.option3 == this.form.selections[2]) {
          selectedVariant = variant;
        }
      });
      window.location.href = '/cart/' + selectedVariant.id + ':' + this.qty;
    },
    increment() {
      this.qty++
    },
    decrement() {
      if (this.qty > 1) {
        this.qty--
      }
    },
    upsellUpdate() {
      const formatter = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2, vmaximumFractionDigits: 2, });
      
      for (const [index, product] of this.upsellProducts.entries()) { 

        for (const variant of product.variants) {
          console.log(variant.title)
          if (variant.option1 == this.selected[0]) {
            console.log(variant.option1)
            product.id = variant.id;
            product.price = variant.price;
            product.compare_at_price = variant.compare_at_price;


            if (variant.compare_at_price != '$0.00') {
              const price = product.price.replace('$', '');
              const comparePrice = product.compare_at_price.replace('$', '');
              const save = parseFloat(comparePrice.replace(/,/g, '')) - parseFloat(price.replace(/,/g, ''));
              console.log(formatter.format(parseFloat(save)));
              product.price_min = formatter.format(parseFloat(save));
            break;
            } else {
              product.price_min = '$0.00';
            };
          };
        };
      };
    },
    upsellAdd(e, id) {
      e.preventDefault();
      console.log(id)

      var data = {
        'items': [
          {
            id: id,
            quantity: this.qty
          }
        ]
      };
      var options = {
        method: "POST",
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      };
      fetch('/cart/add.js', options)
        .then(response => {
          if (response.ok) {
            return response.json()
          } else {
            throw new Error(response.status);
          }
        })
        .then(data => {
          const options = {
              method: "GET"
          };
          fetch("/cart.js", options)
            .then( response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error(response.status);
                }
            })
            .then(data => {
                const cartData = data;
                const counter = document.getElementById('cart-counter');
                const counterMb = document.getElementById('cart-counter-mb');
                counter.textContent = cartData.item_count;
                counterMb.textContent = cartData.item_count;
            })
            .catch(err => {
                console.error("Error:", err)
            });
          this.addingToCart = false;
          const mainDiv = document.getElementById('MainContent');
          mainDiv.insertAdjacentHTML( 'beforeend', `<div id="confirmation-toast" class="flex justify-center items-center gap-2 fixed right-0 left-0 bottom-10 z-[100] text-text bg-white shadow-lp rounded-cl mx-5 p-4 mm:w-max mm:m-auto">
                                        {% render 'icons', icon: 'blue-rounded-check' %}
                                        <p>The product has been added to your cart</p>
                                      </div>`);
          setTimeout(() => {
            document.getElementById('confirmation-toast').remove();
          }, 3000);
        })
        .catch(error => {
          console.log(error)
        });
    }
  }
});
appProduct.mount('#product')
</script>

{% comment %} Swiper {% endcomment %}
<script>
  //Product gallery slider

  //Thumbs images
  const swiper2 = new Swiper('.swiper2', {
      slidesPerView: 3,
      spaceBetween: 12,
      breakpoints: {
        1024: {
          slidesPerView: 4,
          spaceBetween: 20
        },
        480: {
          slidesPerView: 5,
        },
      }     
  });

  //Main gallery
  const swiper = new Swiper('.swiper1', {
    loop: true,
    pagination: {
      el: ".swiper-pagination",
    },  
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    thumbs: {
      swiper: swiper2,
    },
  });
</script>

{% comment %} {{ '//cdnjs.cloudflare.com/ajax/libs/datejs/1.0/date.min.js' | script_tag }}
<script>
  var fromDate = Date.today().addDays(5);
  if (fromDate.is().saturday() || fromDate.is().sunday()) {
  fromDate = fromDate.next().monday();
  }
  var toDate = Date.today().addDays(10);
  if (toDate.is().saturday() || toDate.is().sunday()) {
  toDate = toDate.next().monday();
  }
  document.getElementById('fromDate').innerHTML = fromDate.toString('dddd MMMM dS');
  document.getElementById('toDate').innerHTML = toDate.toString('dddd MMMM dS');
</script> {% endcomment %}


{% schema %}
{   
    "name": "Product details",
    "settings": [
        {
          "type": "image_picker",
          "id": "desk_banner",
          "label": "Desktop banner image (in case of no metafield image)"
        },
        {
          "type": "image_picker",
          "id": "mob_banner",
          "label": "Mobile banner image (in case of no metafield image)"
        },
        {
            "type": "image_picker",
            "id": "stamp",
            "label": "Stamp"
        },
        {
          "type": "text",
          "id": "stamp_message",
          "label": "Stamp message"
        },
        {
            "type": "url",
            "id": "stamp_url",
            "label": "Stamp link"
        },
        {
          "type": "text",
          "id": "upsell_title",
          "label": "Product list title"
        },
        {
          "type": "product_list",
          "id": "product_list",
          "label": "Extra products",
          "limit": 3
        },
        {
            "type": "checkbox",
            "id": "quantity",
            "label": "Show Quantity selector",
            "default": false
        },
        {
          "type": "textarea",
          "id": "stock",
          "label": "Out of stock message",
          "default": "Not available at this time. This product will be available soon. Please contact us if you would still like to place an order."
        },
        {
          "type": "textarea",
          "id": "pre_order",
          "label": "Pre order message",
          "default": "This product will be available soon. Please contact us if you would like to pre-order it."
        }
    ],
    "blocks": [
        {
            "name": "Models",
            "type": "model",
            "settings": [
                {
                  "type": "text",
                  "id": "model_name",
                  "label": "Model Button Name"
                },
                {
                  "type": "product_list",
                  "id": "model_list",
                  "label": "Products Associated With The Model"
                },
                {
                  "type": "url",
                  "id": "model_url",
                  "label": "Model Button URL"
                }
            ]
        }
    ]
}
{% endschema %}